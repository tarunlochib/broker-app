generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  role         String        @default("borrower")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  passwordHash String?
  accounts     Account[]
  applications Application[]
  comments     Comment[]
  sessions     Session[]
}

model Application {
  id                  String     @id @default(cuid())
  userId              String
  status              String     @default("draft")
  propertyAddress     String?
  loanAmount          Float?
  liabilities         Json?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  abn                 String?
  annualIncome        Float?
  assets              Json?
  currentAddress      String?
  dependents          Int?
  deposit             Float?
  dob                 DateTime?
  employerName        String?
  employmentStartDate DateTime?
  employmentStatus    String?
  expenses            Json?
  features            Json?
  firstName           String?
  incomeType          String?
  lastName            String?
  loanPurpose         String?
  lvr                 Float?
  maritalStatus       String?
  occupancy           String?
  occupation          String?
  phone               String?
  propertyType        String?
  purchasePrice       Float?
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments            Comment[]
  documents           Document[]
  notes               Note[]     @relation("ApplicationNotes")
}

model Document {
  id            String      @id @default(cuid())
  applicationId String
  s3Key         String
  fileName      String
  fileType      String
  size          Int
  uploadedBy    String
  status        String      @default("pending_scan")
  createdAt     DateTime    @default(now())
  category      String      @default("other")
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Note {
  id            String      @id @default(cuid())
  applicationId String
  authorId      String
  content       String
  createdAt     DateTime    @default(now())
  application   Application @relation("ApplicationNotes", fields: [applicationId], references: [id], onDelete: Cascade)
}

model Comment {
  id            String      @id @default(cuid())
  applicationId String
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
